// middlewares/auth.js
console.log("ðŸŸ¡ DEBUG: AUTH.JS MODULE LOADED."); // <--- DEBUG LINE ADDED

import jwt from "jsonwebtoken";
import logger from "../utils/logger.js";
import User from "../models/User.js";

const JWT_SECRET = process.env.JWT_SECRET;
const JWT_REFRESH_SECRET = process.env.JWT_REFRESH_SECRET;

const isProd = process.env.NODE_ENV === "production";
const ACCESS_TOKEN_EXPIRY = "15m";
const REFRESH_TOKEN_EXPIRY = "7d";

const PUBLIC_ROUTES = [
Â  "/users/login",
Â  "/users/signup",
Â  "/users/verify-otp",
Â  "/users/refresh",
Â  "/auth/forgot-password",
Â  "/auth/reset-password",
Â  "/contact",
];

const isPublicRoute = (url) => {
Â  const cleanUrl = url.split("?")[0];
Â  return PUBLIC_ROUTES.some((route) => cleanUrl.startsWith(route));
};

export const generateAccessToken = (user) =>
Â  jwt.sign({ id: user._id, role: user.role, email: user.email }, JWT_SECRET, {
Â  Â  expiresIn: ACCESS_TOKEN_EXPIRY,
Â  });

export const generateRefreshToken = (user) =>
Â  jwt.sign({ id: user._id, role: user.role, email: user.email }, JWT_REFRESH_SECRET, {
Â  Â  expiresIn: REFRESH_TOKEN_EXPIRY,
Â  });

// âœ… Handles cookie setup for web, but still allows tokens in headers for mobile
export const setAuthCookies = (res, accessToken, refreshToken) => {
Â  const cookieOptions = {
Â  Â  httpOnly: true,
Â  Â  secure: isProd,
Â  Â  sameSite: "None",
Â  Â  domain: ".smartstudentact.com",
Â  Â  path: "/",
Â  };

Â  res.cookie("access_token", accessToken, {
Â  Â  ...cookieOptions,
Â  Â  maxAge: 15 * 60 * 1000, // 15m
Â  });

Â  res.cookie("refresh_token", refreshToken, {
Â  Â  ...cookieOptions,
Â  Â  maxAge: 7 * 24 * 60 * 60 * 1000, // 7d
Â  });
};

export const authenticateJWT = (req, res, next) => {
Â  if (isPublicRoute(req.originalUrl)) return next();

Â  let token = req.cookies?.access_token;

Â  if (!token && req.headers.authorization) {
Â  Â  const parts = req.headers.authorization.split(" ");
Â  Â  if (parts.length === 2 && parts[0] === "Bearer") token = parts[1];
Â  }

Â  if (!token) {
Â  Â  // logger is not imported here, assuming it's imported at the top
Â  Â  // logger.warn(`Authentication token missing for route: ${req.originalUrl}`);
Â  Â  return res.status(401).json({
Â  Â  Â  status: false,
Â  Â  Â  message: "Authentication token missing.",
Â  Â  });
Â  }

Â  jwt.verify(token, JWT_SECRET, async (err, decoded) => {
Â  Â  if (err) {
Â  Â  Â  if (err.name === "TokenExpiredError") {
Â  Â  Â  Â  const refreshToken = req.cookies?.refresh_token || req.headers["x-refresh-token"];

Â  Â  Â  Â  if (!refreshToken) {
Â  Â  Â  Â  Â  // logger.warn("Access token expired, no refresh token found.");
Â  Â  Â  Â  Â  return res.status(401).json({
Â  Â  Â  Â  Â  Â  status: false,
Â  Â  Â  Â  Â  Â  message: "Session expired. Please login again.",
Â  Â  Â  Â  Â  });
Â  Â  Â  Â  }

Â  Â  Â  Â  return jwt.verify(refreshToken, JWT_REFRESH_SECRET, async (refreshErr, refreshDecoded) => {
Â  Â  Â  Â  Â  if (refreshErr) {
Â  Â  Â  Â  Â  Â  // logger.error(`Refresh token invalid/expired: ${refreshErr.message}`);
Â  Â  Â  Â  Â  Â  return res.status(403).json({
Â  Â  Â  Â  Â  Â  Â  status: false,
Â  Â  Â  Â  Â  Â  Â  message: "Refresh token expired or invalid. Please login again.",
Â  Â  Â  Â  Â  Â  });
Â  Â  Â  Â  Â  }

Â  Â  Â  Â  Â  // NOTE: This requires mongoose to be connected, but we are in a synchronous route middleware chain
Â  Â  Â  Â  Â  // It's generally safer to pull the user outside of jwt.verify, but we will proceed for now.
Â  Â  Â  Â  Â  const user = await User.findById(refreshDecoded.id); 
Â  Â  Â  Â  Â  // We assume User import works
Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  if (!user || user.refreshToken !== refreshToken) {
Â  Â  Â  Â  Â  Â  // logger.warn(`Refresh token mismatch for user ${refreshDecoded.id}.`);
Â  Â  Â  Â  Â  Â  return res.status(403).json({
Â  Â  Â  Â  Â  Â  Â  status: false,
Â  Â  Â  Â  Â  Â  Â  message: "Invalid session. Please login again.",
Â  Â  Â  Â  Â  Â  });
Â  Â  Â  Â  Â  }

Â  Â  Â  Â  Â  const newAccessToken = generateAccessToken(user);

Â  Â  Â  Â  Â  // Note: Headers are safer than cookies for issuing new tokens in response to an expired one
Â  Â  Â  Â  Â  // in a token renewal flow, but we maintain the cookies here.
Â  Â  Â  Â  Â  
Â  Â  Â  Â  Â  res.cookie("access_token", newAccessToken, {
Â  Â  Â  Â  Â  Â  httpOnly: true,
Â  Â  Â  Â  Â  Â  secure: isProd,
Â  Â  Â  Â  Â  Â  sameSite: "None",
Â  Â  Â  Â  Â  Â  domain: ".smartstudentact.com",
Â  Â  Â  Â  Â  Â  path: "/",
Â  Â  Â  Â  Â  Â  maxAge: 15 * 60 * 1000,
Â  Â  Â  Â  Â  });

Â  Â  Â  Â  Â  res.setHeader("x-access-token", newAccessToken);

Â  Â  Â  Â  Â  req.userId = user._id;
Â  Â  Â  Â  Â  req.userRole = user.role;
Â  Â  Â  Â  Â  req.email = user.email;
Â  Â  Â  Â  Â  req.user = user;

Â  Â  Â  Â  Â  // logger.info("New access token issued via refresh token.");
Â  Â  Â  Â  Â  return next();
Â  Â  Â  Â  });
Â  Â  Â  }

Â  Â  Â  // logger.error(`JWT verification failed: ${err.message}`);
Â  Â  Â  return res.status(403).json({
Â  Â  Â  Â  status: false,
Â  Â  Â  Â  message: "Invalid token.",
Â  Â  Â  });
Â  Â  }

Â  Â  req.userId = decoded.id;
Â  Â  req.userRole = decoded.role;
Â  Â  req.email = decoded.email;
Â  Â  req.user = decoded;
Â  Â  next();
Â  });
};

export const requireAdmin = (req, res, next) => {
Â  const adminRoles = ["admin", "overseer", "global_overseer"];
Â  if (!req.userRole || !adminRoles.includes(req.userRole)) {
Â  Â  return res.status(403).json({
Â  Â  Â  status: false,
Â  Â  Â  message: "Sorry, you are not authorised to view this resource. Contact your administrator.",
Â  Â  });
Â  }
Â  next();
};

